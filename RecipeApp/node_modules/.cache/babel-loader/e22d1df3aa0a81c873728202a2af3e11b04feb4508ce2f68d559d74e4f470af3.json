{"ast":null,"code":"/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* global DOMException */\n\nmodule.exports = clipboardCopy;\nfunction makeError() {\n  return new DOMException('The request is not allowed', 'NotAllowedError');\n}\nasync function copyClipboardApi(text) {\n  // Use the Async Clipboard API when available. Requires a secure browsing\n  // context (i.e. HTTPS)\n  if (!navigator.clipboard) {\n    throw makeError();\n  }\n  return navigator.clipboard.writeText(text);\n}\nasync function copyExecCommand(text) {\n  // Put the text to copy into a <span>\n  const span = document.createElement('span');\n  span.textContent = text;\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre';\n  span.style.webkitUserSelect = 'auto';\n  span.style.userSelect = 'all';\n\n  // Add the <span> to the page\n  document.body.appendChild(span);\n\n  // Make a selection object representing the range of text selected by the user\n  const selection = window.getSelection();\n  const range = window.document.createRange();\n  selection.removeAllRanges();\n  range.selectNode(span);\n  selection.addRange(range);\n\n  // Copy text to the clipboard\n  let success = false;\n  try {\n    success = window.document.execCommand('copy');\n  } finally {\n    // Cleanup\n    selection.removeAllRanges();\n    window.document.body.removeChild(span);\n  }\n  if (!success) throw makeError();\n}\nasync function clipboardCopy(text) {\n  try {\n    await copyClipboardApi(text);\n  } catch (err) {\n    // ...Otherwise, use document.execCommand() fallback\n    try {\n      await copyExecCommand(text);\n    } catch (err2) {\n      throw err2 || err || makeError();\n    }\n  }\n}","map":{"version":3,"names":["module","exports","clipboardCopy","makeError","DOMException","copyClipboardApi","text","navigator","clipboard","writeText","copyExecCommand","span","document","createElement","textContent","style","whiteSpace","webkitUserSelect","userSelect","body","appendChild","selection","window","getSelection","range","createRange","removeAllRanges","selectNode","addRange","success","execCommand","removeChild","err","err2"],"sources":["/Applications/Git/trybe github/trybe/projetos/projeto-app-receita/sd-030-a-project-recipes-app/node_modules/clipboard-copy/index.js"],"sourcesContent":["/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* global DOMException */\n\nmodule.exports = clipboardCopy\n\nfunction makeError () {\n  return new DOMException('The request is not allowed', 'NotAllowedError')\n}\n\nasync function copyClipboardApi (text) {\n  // Use the Async Clipboard API when available. Requires a secure browsing\n  // context (i.e. HTTPS)\n  if (!navigator.clipboard) {\n    throw makeError()\n  }\n  return navigator.clipboard.writeText(text)\n}\n\nasync function copyExecCommand (text) {\n  // Put the text to copy into a <span>\n  const span = document.createElement('span')\n  span.textContent = text\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n  span.style.webkitUserSelect = 'auto'\n  span.style.userSelect = 'all'\n\n  // Add the <span> to the page\n  document.body.appendChild(span)\n\n  // Make a selection object representing the range of text selected by the user\n  const selection = window.getSelection()\n  const range = window.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n\n  // Copy text to the clipboard\n  let success = false\n  try {\n    success = window.document.execCommand('copy')\n  } finally {\n    // Cleanup\n    selection.removeAllRanges()\n    window.document.body.removeChild(span)\n  }\n\n  if (!success) throw makeError()\n}\n\nasync function clipboardCopy (text) {\n  try {\n    await copyClipboardApi(text)\n  } catch (err) {\n    // ...Otherwise, use document.execCommand() fallback\n    try {\n      await copyExecCommand(text)\n    } catch (err2) {\n      throw (err2 || err || makeError())\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAGC,aAAa;AAE9B,SAASC,SAAS,GAAI;EACpB,OAAO,IAAIC,YAAY,CAAC,4BAA4B,EAAE,iBAAiB,CAAC;AAC1E;AAEA,eAAeC,gBAAgB,CAAEC,IAAI,EAAE;EACrC;EACA;EACA,IAAI,CAACC,SAAS,CAACC,SAAS,EAAE;IACxB,MAAML,SAAS,EAAE;EACnB;EACA,OAAOI,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC;AAC5C;AAEA,eAAeI,eAAe,CAAEJ,IAAI,EAAE;EACpC;EACA,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EAC3CF,IAAI,CAACG,WAAW,GAAGR,IAAI;;EAEvB;EACAK,IAAI,CAACI,KAAK,CAACC,UAAU,GAAG,KAAK;EAC7BL,IAAI,CAACI,KAAK,CAACE,gBAAgB,GAAG,MAAM;EACpCN,IAAI,CAACI,KAAK,CAACG,UAAU,GAAG,KAAK;;EAE7B;EACAN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;;EAE/B;EACA,MAAMU,SAAS,GAAGC,MAAM,CAACC,YAAY,EAAE;EACvC,MAAMC,KAAK,GAAGF,MAAM,CAACV,QAAQ,CAACa,WAAW,EAAE;EAC3CJ,SAAS,CAACK,eAAe,EAAE;EAC3BF,KAAK,CAACG,UAAU,CAAChB,IAAI,CAAC;EACtBU,SAAS,CAACO,QAAQ,CAACJ,KAAK,CAAC;;EAEzB;EACA,IAAIK,OAAO,GAAG,KAAK;EACnB,IAAI;IACFA,OAAO,GAAGP,MAAM,CAACV,QAAQ,CAACkB,WAAW,CAAC,MAAM,CAAC;EAC/C,CAAC,SAAS;IACR;IACAT,SAAS,CAACK,eAAe,EAAE;IAC3BJ,MAAM,CAACV,QAAQ,CAACO,IAAI,CAACY,WAAW,CAACpB,IAAI,CAAC;EACxC;EAEA,IAAI,CAACkB,OAAO,EAAE,MAAM1B,SAAS,EAAE;AACjC;AAEA,eAAeD,aAAa,CAAEI,IAAI,EAAE;EAClC,IAAI;IACF,MAAMD,gBAAgB,CAACC,IAAI,CAAC;EAC9B,CAAC,CAAC,OAAO0B,GAAG,EAAE;IACZ;IACA,IAAI;MACF,MAAMtB,eAAe,CAACJ,IAAI,CAAC;IAC7B,CAAC,CAAC,OAAO2B,IAAI,EAAE;MACb,MAAOA,IAAI,IAAID,GAAG,IAAI7B,SAAS,EAAE;IACnC;EACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}